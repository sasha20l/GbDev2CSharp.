@page "/Search"
@using System.ComponentModel.DataAnnotations;
@using CloneHabr.Dto.Requests;
@inject HttpClient httpClient
@inject IJSRuntime JsRuntime

<div class="row justify-content-center">
    <h1 align="center">Поиск</h1>

    <div >
        <EditForm Model="searchQuery" OnValidSubmit="OnSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="input-group mb-3">
                <span class="input-group-text">Ищем:</span>
                <div class="col-6" >

                    <InputText @bind-Value="searchQuery.SearchString" class="form-control" />
                </div>

                <span class="input-group-text ms-1">сортировка по</span>
                <div class="col-2">
                    <InputSelect @bind-Value="searchQuery.ResultArrangeByLikes" class="form-control">
                        <option value="false">времени</option>
                        <option value="true">лайкам</option>
                    </InputSelect>
                </div>
            
                <button class="btn btn-primary mx-1" type="submit">Найти</button>
            </div>

        </EditForm>
        Количество найденных статей: @articlesLidResponse.Count
        <hr />
        <ArticleLidsList articlesLidResponses="@articlesLidResponse" />
    </div>
</div>

@code {
    SearchQuery searchQuery = new();
    List<ArticleDto> articlesLidResponse = new();

    private async void OnSubmit()
    {
        string uri = $"api/Article/GetArticlesLidByText?text={searchQuery.SearchString}&raitingSort={searchQuery.ResultArrangeByLikes}";
        Console.WriteLine($"*** Search.OnSubmit() string = {searchQuery.SearchString}, arrange = {searchQuery.ResultArrangeByLikes}");
        try
        {
            var response = await httpClient.GetFromJsonAsync<ArticlesLidResponse>(uri);
            if (response.Articles is not null)
            {
                articlesLidResponse = response.Articles;
                StateHasChanged();
            }
            else
            {
                articlesLidResponse = new();
            }
        }
        catch (Exception)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Ой, при выполнении запроса возникла ошибка на сервере,\nпопоробуйте повторить поиск позднее");
        }
        Console.WriteLine($"*** Найдено записей: {articlesLidResponse.Count}");
    }

    class SearchQuery
    {
        [Required]
        public string SearchString { get; set; } = string.Empty;
        public bool ResultArrangeByLikes { get; set; }
    }

}
