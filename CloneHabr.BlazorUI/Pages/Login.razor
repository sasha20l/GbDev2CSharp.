@page "/login"
@using CloneHabr.Dto.Requests;
@using CloneHabr.Dto.Status;
@inject HttpClient httpClient
@inject SessionDto userSession
@inject UserInfo userInfo
@inject NavigationManager navigationManager
@inject IJSRuntime JsRuntime


<PageTitle>Login</PageTitle>

<div class="row justify-content-center" >
    <div class="col-md-7" >
        <div class="card mt-3 mb-3" >
            <div class="card-header">
                <h2>Login</h2>
            </div>
            <div class="card-body">

            <EditForm Model="authenticationRequest" OnValidSubmit="SubmitForm">
                <Errors ErrorText=@loginErrorText></Errors>
                <DataAnnotationsValidator />
                <ValidationSummary />
                
                <label>Login</label>
                <InputText @bind-Value="authenticationRequest.Login" class="form-control"></InputText>
                <label>Password</label>
                <InputText @bind-Value="authenticationRequest.Password" type="password" class="form-control"></InputText>
                <br />
                <button class="btn btn-primary" type="submit">Login</button>
            </EditForm>
            <br />
            If not register yet...<NavLink class="nav-link col-3" href="register">Register</NavLink>
            </div>
        </div>

    </div>
</div>
<br />


@code {
    AuthenticationRequest authenticationRequest = new();
    string loginErrorText = string.Empty;

    private async Task SubmitForm()
    {
        string uri = "api/Authenticate/login";

        using var response = await httpClient.PostAsJsonAsync<AuthenticationRequest>(uri, authenticationRequest);
        if (response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            var authResponse = await response.Content.ReadFromJsonAsync<AuthenticationResponse>();

            if (authResponse.Status == AuthenticationStatus.Success)
            {
                userInfo.LogIn(
                    authResponse.Session.User.UserId,
                    authResponse.Session.SessionId,
                    authResponse.Session.User.Login,
                    authResponse.Session.SessionToken);
                httpClient.DefaultRequestHeaders.Add("Authorization", $"Bearer {userInfo.Token}");
                navigationManager.NavigateTo("/home");
            }
            else
            {
                //_ = await JsRuntime.InvokeAsync<bool>("prompt", "Login unsuccess");
                //await JsRuntime.InvokeVoidAsync("alert", "Login unsuccess");
                loginErrorText = "Неверное имя или пароль";
            }

        }
    }
}
